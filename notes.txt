# Background image
  background: linear-gradient(to right bottom, rgba(126,213,111,.7), rgba(40,180,133,.7)), url("../img/hero.jpg");
  background-size: cover;
  background-position: top;

# Box-shadow
  Box-shadow: horizontal vetical blur spread color;

# Clipping a container
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

#to center a div in another div
  display: flex;
  justify-content: center;
  align-items: center;

  OR

  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

#Animation Keyframes
  ##They are optimized for only 2 properties-
    1. Opacity
    2. Transform

#Animations
  animation-name: moveInLeft;
  animation-duration: 3s;
  animation-delay: 2s; // wait for 2s before animation starts
  animation-iteration-count: 5; //animation will run 5 times
  animation-timing-funtion: ease/ease-in/ease-out/ease-in-out/linear/step-start/step-end/cubic-bezier(0.1, 0.7, 1.0, 0.1)/steps(4, end)/ease, step-start, cubic-bezier(0.1, 0.7, 1.0, 0.1)

  set backface-visibility: hidden if u see shaking in animations

# Set display: inline-block when we give padding or width to an element

# Pseudo classes
  :link, for links unvisited
  :visited, for visited links
  :active, for the link we have our mouse currently pressed on, or an active link

# Pseudo elements
  ::after, adds a virtual element right after the current element, and we can then style that element
  ##Always add-
    1. content: ""
    2. display: same as it's parent's
  ## Other attribute-
    height: 100%, this will make it's height the same as of it's parent's
    width: 100%, makes width equal to parent's width
    background-color
    transition will be in the initial state
